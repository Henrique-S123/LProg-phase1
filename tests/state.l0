let m = box(9);
let v = *m;
v+1;;
# 10

let m = box(0);
m := *m + 1;
m := *m + 1;
m := *m + 1;
m := *m + 1;
m := *m + 1;
*m;;
# 5

let m = box(9);
let v = *m;
m := v + 1;
v;;
# 9

let m = box(9);
let v = *m;
m := v + 1;
*m;;
# 10

let c = 0;
let L = 1000;
let m = box(c);
while (*m>0) {
    m := *m - 1
};
*m;;
# 0

let c = 0;
let L = 1000;
let m = box(L);
let S = box(c);
while (*m>0) {
    m := *m - 1;
    S := *S + *m
};
*S;;
# 499500

let sigfpe = box ( fn x=>{x} );
let setfpe = fn h => { sigfpe := h };
let div = fn n,m => {
      if (m==0) { (*sigfpe) (n) }
        else { n / m}
};
setfpe (fn v => { -1 });
div (2) (0)
;;
# -1

let knot = box (fn x => {x});
let fact = fn n => {
      if (n==0) { 1}
        else { n * ((*knot)( n - 1 ))}};
knot := fact;
fact (6)
;;
# 720

let mkpair =
    fn a,b => { 
        let l = box(a);
        let r = box(b);
        fn f => { f (l) (r) }
};
let getfst = fn p => { p (fn a,b => {*a }) };
let setfst = fn p,v => { p (fn a,b => {a := v })};
let getsnd = fn p => {p (fn a,b => {*b })};
let setsnd = fn p,v => { p (fn a,b => {b := v})};
let x = mkpair (1) (2);
setfst (x) (10);
setsnd (x) (20);
(getfst (x)) + (getsnd (x))
;;
# 30

let mkpair =
    fn a,b => { 
        let l = box(a);
        let r = box(b);
        fn f => { f (l) (r) }
};
let getfst = fn p => { p (fn a,b => {*a }) };
let setfst = fn p,v => { p (fn a,b => {a := v })};
let getsnd = fn p => {p (fn a,b => {*b })};
let setsnd = fn p,v => { p (fn a,b => {b := v})};
let mp = mkpair(2)(3);
setfst(mp) (getfst(mp)+getsnd(mp));
getsnd(mp)* (getfst(mp));;
# 15

let x = box 1; x;;
# ref(1)

let x = box 1; *x;;
# 1

let k = 2;
let a = box k;
let b = box (*a+2);
b := *a * *b + k;;
# 10

let k = 2;
let a = box k;
let b = box (*a+2);
b := *a * *b + k; b;;
# ref(10)

let k = box 2;
let a = k;
let b = box (*a);
a := *k+*b;;
# 4

let fact = fn n => {
    let c = box n;
    let f = box 1;
    while (*c > 0) {
        f := *f * *c;
        c := *c - 1
    };
    *f
}; println(fact (6));;
# 720
# true

let c = box 5;
while (*c > 0) {
    println(*c);
    c := *c - 1
};;
# 5
# 4
# 3
# 2
# 1
# false

let c = box 3;
if (*c > 4) {*c + 2} else {*c + 3};;
# 6

let m = box 5;
while (*m > 0) {
        let x = *m + 1; println(x);
        m := *m - 1
};;
# 6
# 5
# 4
# 3
# 2
# false
