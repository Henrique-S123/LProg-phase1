let l = 1::2::nil;
match l {
    nil -> println(nil)
|   x::y -> println(x); println(y)
};;
# 1
# (2::nil)
# true

let len = fn l =>
    {   
        match l {
        nil -> 0
      | x::y -> 1 + len (y)
    }};
let l0 = 1::2::3::nil;
len (l0);;
# 3

let mkl = fn n =>
{
    if (n==0) {
        nil
    } else {
        n::( mkl(n-1))
    }
};
let len = fn l =>
    {   println (l);
        match l {
        nil -> 0
      | x::y -> 1 + len (y)
    }};
let l100 = mkl (100);
println l100;
len(l100)
;;
# huge output
# 100

let mkl = fn n =>
{
    if (n==0) {
        nil
    } else {
        n::( mkl(n-1))
    }
};
let suml = fn l =>
    {   
        match l {
        nil -> 0
      | x::y -> x + suml (y)
    }};
let l100 = mkl (100);
println l100;
suml(l100)
;;
# 5050

----------------------------------------------

nil;;
# nil

2::(3::(4::nil));;
# (2::(3::(4::nil)))

let sum = fn list => {
match list {
    nil -> 0 | v::tail -> v + sum(tail)}
};
let myL = 1::(2::(3::(4::(5::nil))));
sum(myL);;
# 15

let max = box 0;
let getmax = fn list => {
match list {
    nil -> println("end of list") | v::tail -> if (v > *max) {max := v; getmax(tail)} else {getmax(tail)}}
};
let myL = 1::(2::(3::(4::(5::nil))));
getmax(myL); *max;;
# "end of list"
# 5
