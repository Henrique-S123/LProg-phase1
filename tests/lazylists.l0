let l = 1:?2:?nil;
match l {
    nil -> println(nil)
|   x::y -> println(x); println(y)
};;
# 1
# (proj.ast.ASTInt@45ee12a7:?proj.ast.ASTNil@330bedb4)
# true

let l = 1:?2::nil;
match l {
    nil -> println(nil)
|   x::y -> println(x); println(y)
};;
# 1
# (2::nil)
# true

let add1 = fn l => {
    match l {
        nil -> 0
        |
        h::t -> (h+1)::(add1 (t))
    }
};
let mkl = fn n =>
{
    if (n==0) {
        nil
    } else {
        n::( mkl(n-1))
    }
};
add1 ( mkl (10) ) ;;
# (11::(10::(9::(8::(7::(6::(5::(4::(3::(2::0))))))))))

let add1 = fn l => {
    match l {
        nil -> 0
        |
        h::t -> (h+1)::(add1 (t))
    }
};
let mkll = fn n =>
{
    if (n==0) {
        nil
    } else {
        n:?( mkll(n-1))
    }
};
let ll100 = mkll (100);
add1 ( ll100 ) ;;
# (101::(100::(99::(98::(97::(96::(95::(94::(93::(92::(91::(90::(89::(88::(87::(86::(85::(84::(83::(82::(81::(80::(79::(78::(77::(76::(75::(74::(73::(72::(71::(70::(69::(68::(67::(66::(65::(64::(63::(62::(61::(60::(59::(58::(57::(56::(55::(54::(53::(52::(51::(50::(49::(48::(47::(46::(45::(44::(43::(42::(41::(40::(39::(38::(37::(36::(35::(34::(33::(32::(31::(30::(29::(28::(27::(26::(25::(24::(23::(22::(21::(20::(19::(18::(17::(16::(15::(14::(13::(12::(11::(10::(9::(8::(7::(6::(5::(4::(3::(2::0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

let fibo = fn a, b => { a :? (fibo (b) (a+b)) };
let fibogen = fibo (0) (1);
let count = box ( 20 ) ;
let lv = box( fibogen );
while (*count ~= 0) {
     match (*lv) {
        nil -> println (0)
      | v :: tail -> println (v); lv := tail
     };
     count := *count - 1
};;
# 0
# 1
# 1
# 2
# 3
# 5
# 8
# 13
# 21
# 34
# 55
# 89
# 144
# 233
# 377
# 610
# 987
# 1597
# 2584
# 4181
# false

let intsfm = fn n => {
    n:? (intsfm (n+1))
};
let pfst = fn l,n => {
    if (n==0) {
        println(n)
    } else {
        match l {
            nil -> 0
            |
            h::t -> println(h); pfst (t) (n-1)
        }
    }
};
let l = intsfm (0);
pfst (l) (20);;
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 11
# 12
# 13
# 14
# 15
# 16
# 17
# 18
# 19
# 0
# true

let intsfm = fn n => {
    n:? (intsfm (n+1))
};
let filter = fn l, g => {
    match l {
        nil -> nil
    |
        h::t -> if (g(h)) {
            h :? (filter (t) (g))
        } else { filter (t) (g)}
    }
};
let pfst = fn l,n => {
    if (n==0) {
        println(n)
    } else {
        match l {
            nil -> 0
            |
            h::t -> println(h); pfst (t) (n-1)
        }
    }
};
let l = intsfm (0);
let even = fn n => { (n/2)*2 == n };
let m = filter (l) (even);
pfst (m) (20);;
# 0
# 2
# 4
# 6
# 8
# 10
# 12
# 14
# 16
# 18
# 20
# 22
# 24
# 26
# 28
# 30
# 32
# 34
# 36
# 38
# 0
# true
